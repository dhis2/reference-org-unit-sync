- route:
    id: syncOrgUnitCreateOrUpdateRoute
    routeConfigurationId: deadLetterQueueRouteConfig
    logMask: true
    from:
      uri: direct:syncOrgUnitCreateOrUpdate
      steps:
        - filter:
            simple: ${body} != null
        - setProperty:
            name: id
            simple: ${body}
        - toD:
            uri: dhis2:get/resource
            parameters:
              path: "organisationUnits/${exchangeProperty.id}"
              fields: "*"
              username: "{{source.dhis2ApiUsername}}"
              password: "{{source.dhis2ApiPassword}}"
              baseApiUrl: "{{source.dhis2ApiUrl}}"
        - unmarshal:
            json: { }
        - setProperty:
            name: orgUnit
            simple: ${body}
        - log:
            loggingLevel: INFO
            message: "Syncing create/update for org unit [${exchangeProperty.id}]..."
        - split:
            shareUnitOfWork: true
            method:
              beanType: "TargetsSplitter"
              method: "split"
            steps:
              - setProperty:
                  name: target
                  simple: ${body}
              - transform:
                  datasonnet:
                    outputMediaType: application/x-java-object
                    resultType: java.util.Map
                    bodyMediaType: application/x-java-object
                    expression: resource:classpath:datasonnet/orgUnit.ds
              - toD: ${exchangeProperty.target['endpointUri']}

- route:
    id: syncOrgUnitDeleteRoute
    routeConfigurationId: deadLetterQueueRouteConfig
    logMask: true
    from:
      uri: direct:syncOrgUnitDelete
      steps:
        - setProperty:
            name: id
            simple: ${body}
        - log:
            loggingLevel: INFO
            message: "Syncing delete for org unit [${body}]..."
        - split:
            shareUnitOfWork: true
            method:
              beanType: "TargetsSplitter"
              method: "split"
            steps:
              - setProperty:
                  name: target
                  simple: ${body}
              - doTry:
                  steps:
                    - toD:
                        uri: dhis2:delete/resource
                        parameters:
                          path: "organisationUnits/${exchangeProperty.id}"
                          username: ${exchangeProperty.target['dhis2ApiUsername']}
                          password: ${exchangeProperty.target['dhis2ApiPassword']}
                          baseApiUrl: ${exchangeProperty.target['dhis2ApiUrl']}
                    - log:
                        loggingLevel: INFO
                        message: Synced deleted org unit [${exchangeProperty.id}] with target server [${exchangeProperty.target['dhis2ApiUrl']}]
                    - doCatch:
                        exception:
                          - org.hisp.dhis.integration.sdk.api.RemoteDhis2ClientException
                        onWhen:
                          simple: ${exception.cause.httpStatusCode} == 404
                        steps:
                          - log:
                              loggingLevel: ERROR
                              message: Deleted org unit [${exchangeProperty.id}] not found on target server [${exchangeProperty.target['dhis2ApiUrl']}]
